FROM node:14 as build

# Do not use 'COPY . .' to copy all files. Copying all files will force a build even if no client files have been modified

# Set app directory
WORKDIR /app

# Environment variables
# ENV NODE_OPTIONS="--max_old_space_size=8192"
ENV PATH /app/node_modules/.bin:$PATH

# Install
COPY package.json ./
COPY package-lock.json ./

RUN npm install --only=production
# In production, we will use the package lock generated in the development process. No versions surprises.
RUN npm clean-install

# Build
COPY src ./src
COPY public ./public
COPY .eslintrc.js ./
COPY tsconfig.json ./
COPY webpack.config.j[s] ./
RUN npm run build

# Nginx proxy to serve backend ('/api') and frontend ('/') from same port
FROM nginx:stable-alpine
COPY ./nginx/nginx.conf /etc/nginx/conf.d/default.conf
COPY --from=build /app/build /usr/share/nginx/html
EXPOSE 80



# FROM node:14 as builder

# WORKDIR /app
# ENV NODE_OPTIONS=--max_old_space_size=4096

# # Copy package files first for caching
# COPY package*.json ./
# COPY sync-package-lock ./

# # Install dependencies
# RUN npm ci --production

# # Copy app files
# COPY . .

# # Build the app
# RUN npm run build

# # Production stage
# FROM nginx:stable-alpine

# # Remove default config
# RUN rm /etc/nginx/conf.d/default.conf

# # Copy our nginx config
# COPY nginx/nginx.conf /etc/nginx/conf.d/

# # Copy built app
# COPY --from=builder /app/build /usr/share/nginx/html

# # Create any required directories
# RUN mkdir -p /app/node_modules_for_local_development && \
#     mkdir -p /app/sync-package-lock

# EXPOSE 80

# CMD ["nginx", "-g", "daemon off;"]